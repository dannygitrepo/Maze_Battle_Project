/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import functionality.Map;
import functionality.Player;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
/**
 *
 * @author admin
 */
public class MainInterface extends JFrame implements KeyListener{

    Map m;
    Player p;
    public MainInterface() throws IOException {
        super("Demonstrating Keystroke Events");
        initComponents();
        this.m = new Map(36,12, JMap);
        try {
            // creating map by reading status file
            Scanner s = new Scanner(new BufferedReader(new FileReader("Reseau.txt")));
            for (int i = 0; i < 12; i++) {
                for (int j = 0; j < 36; j++) {
                    String str = s.next();
                    int x = Integer.parseInt(str);
                    //each value of x is a unit's status 
                    m.SetBoundsLabel(i, j, 15);
                    m.SetUnitType(i, j, x);
                }
            }
            
            p = m.SetTankOnMap(15, "Dang");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.setFocusable(true);   // Allow this panel to get focus.
        // Adding the key listener here.
        addKeyListener(this);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{"You", "0", "100"});
       
        /*
        // client socket
        Socket socket = new Socket("", 6060);
        // output stream
        OutputStream outToServer = socket.getOutputStream();
        DataOutputStream out = new DataOutputStream(outToServer);
        // input stream
        InputStream inFromServer = socket.getInputStream();
        DataInputStream in = new DataInputStream(inFromServer);
        */
    }
    
    public Map GetMap(){
        return this.m;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        Console = new javax.swing.JList();
        JMap = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Score", "Endurance"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(2).setResizable(false);
        }

        Console.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(Console);

        Border border = BorderFactory.createLineBorder(Color.BLACK);
        JMap.setLayout(null);
        JMap.setBorder(border);
        JMap.setPreferredSize(new java.awt.Dimension(540, 180));

        javax.swing.GroupLayout JMapLayout = new javax.swing.GroupLayout(JMap);
        JMap.setLayout(JMapLayout);
        JMapLayout.setHorizontalGroup(
            JMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        JMapLayout.setVerticalGroup(
            JMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(JMap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(JMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

    }//GEN-LAST:event_formKeyReleased

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped

    }//GEN-LAST:event_formKeyTyped


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    MainInterface application = new MainInterface();
                    application.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainInterface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList Console;
    private javax.swing.JPanel JMap;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent event) {
    }


    public void keyPressed(KeyEvent event) {
         /*DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String line1 = "Key released: " + event.getKeyText(event.getKeyCode());
        model.addRow(new Object[]{line1, "0", "100"});*/
    }

    @Override
    public void keyReleased(KeyEvent event) {
        if (event.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (p.getDirection().equals("NORTH")) {
                p.setDirection("EAST");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-east.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("EAST")) {
                p.setDirection("SOUTH");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-south.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("SOUTH")) {
                p.setDirection("WEST");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-west.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("WEST")) {
                p.setDirection("NORTH");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-north.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
        }
        else if (event.getKeyCode() == KeyEvent.VK_LEFT) {
            if (p.getDirection().equals("NORTH")) {
                p.setDirection("WEST");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-west.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("EAST")) {
                p.setDirection("NORTH");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-north.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("SOUTH")) {
                p.setDirection("EAST");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-east.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("WEST")) {
                p.setDirection("SOUTH");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-south.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
        }
        // go ahead
        else if (event.getKeyCode() == KeyEvent.VK_UP) {
            if (p.getDirection().equals("NORTH")) {
                p.MoveNorth(m.GetMatrix());
            }
            else if (p.getDirection().equals("EAST")) {
                p.MoveEast(m.GetMatrix());
            }
            else if (p.getDirection().equals("SOUTH")) {
                p.MoveSouth(m.GetMatrix());
            }
            else if (p.getDirection().equals("WEST")) {
                p.MoveWest(m.GetMatrix());
            }
        }
        //go back
        else if (event.getKeyCode() == KeyEvent.VK_DOWN) {
            if (p.getDirection().equals("NORTH")) {
                p.MoveSouth(m.GetMatrix());
            }
            else if (p.getDirection().equals("EAST")) {
                p.MoveWest(m.GetMatrix());
            }
            else if (p.getDirection().equals("SOUTH")) {
                p.MoveNorth(m.GetMatrix());
            }
            else if (p.getDirection().equals("WEST")) {
                p.MoveEast(m.GetMatrix());
            }
        }
        
        // turn back
        else if (event.getKeyText(event.getKeyCode()).equals("U")) {
            if (p.getDirection().equals("NORTH")) {
                p.setDirection("SOUTH");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-south.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("EAST")) {
                p.setDirection("WEST");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-west.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("SOUTH")) {
                p.setDirection("NORTH");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-north.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
            else if (p.getDirection().equals("WEST")) {
                p.setDirection("EAST");
                p.getPhoto().setIcon(new ImageIcon(new ImageIcon("images/tank-east.png").getImage()
						.getScaledInstance(15, 15, Image.SCALE_AREA_AVERAGING)));
            }
        }
    }
}